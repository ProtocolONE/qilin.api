// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: packages_service.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PackageService service

type PackageService interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*PublishResponse, error)
	Get(ctx context.Context, in *GetPackageRequest, opts ...client.CallOption) (*GetPackageResponse, error)
	GetPrice(ctx context.Context, in *GetPackagePriceRequest, opts ...client.CallOption) (*GetPackagePriceResponse, error)
}

type packageService struct {
	c    client.Client
	name string
}

func NewPackageService(name string, c client.Client) PackageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &packageService{
		c:    c,
		name: name,
	}
}

func (c *packageService) Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*PublishResponse, error) {
	req := c.c.NewRequest(c.name, "PackageService.Publish", in)
	out := new(PublishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageService) Get(ctx context.Context, in *GetPackageRequest, opts ...client.CallOption) (*GetPackageResponse, error) {
	req := c.c.NewRequest(c.name, "PackageService.Get", in)
	out := new(GetPackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageService) GetPrice(ctx context.Context, in *GetPackagePriceRequest, opts ...client.CallOption) (*GetPackagePriceResponse, error) {
	req := c.c.NewRequest(c.name, "PackageService.GetPrice", in)
	out := new(GetPackagePriceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PackageService service

type PackageServiceHandler interface {
	Publish(context.Context, *PublishRequest, *PublishResponse) error
	Get(context.Context, *GetPackageRequest, *GetPackageResponse) error
	GetPrice(context.Context, *GetPackagePriceRequest, *GetPackagePriceResponse) error
}

func RegisterPackageServiceHandler(s server.Server, hdlr PackageServiceHandler, opts ...server.HandlerOption) error {
	type packageService interface {
		Publish(ctx context.Context, in *PublishRequest, out *PublishResponse) error
		Get(ctx context.Context, in *GetPackageRequest, out *GetPackageResponse) error
		GetPrice(ctx context.Context, in *GetPackagePriceRequest, out *GetPackagePriceResponse) error
	}
	type PackageService struct {
		packageService
	}
	h := &packageServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PackageService{h}, opts...))
}

type packageServiceHandler struct {
	PackageServiceHandler
}

func (h *packageServiceHandler) Publish(ctx context.Context, in *PublishRequest, out *PublishResponse) error {
	return h.PackageServiceHandler.Publish(ctx, in, out)
}

func (h *packageServiceHandler) Get(ctx context.Context, in *GetPackageRequest, out *GetPackageResponse) error {
	return h.PackageServiceHandler.Get(ctx, in, out)
}

func (h *packageServiceHandler) GetPrice(ctx context.Context, in *GetPackagePriceRequest, out *GetPackagePriceResponse) error {
	return h.PackageServiceHandler.GetPrice(ctx, in, out)
}
