openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/protocolone6/Qilin/1.0.0
info:
  description: |
    # Introduction 
    Open Game Data Exchange is an open specification for sharing information about video games,
    players, and digital distribution objects. Together with other standards, it is used as a basis 
    for the implementation of open source software for the marketplaces and distribution of video 
    games on various platforms.
    
    # Motivation
    Many developers are familiar with HTML tags and various micro markup formats that are used to 
    add meta information to web pages. There are no specifications and standards for the exchange of
    meta information about games that would automate the process of adding and updating such data 
    on a large number of platforms. 

    A number of platforms allow you to update and add such information using special administration
    panels, but most receive and update such information unsystematically — using e-mail or other means
    of communication. A separate platform provides an API and mechanisms to obtain such information is
    generally not public. 

    Publishers and developers perform routine work on adding and synchronizing information to various
    platforms, stores, portals and forums dedicated to games. Data consumers use data scraping / grabbing
    to obtain such information directly from web pages.   

    Existing schema.org, JSON-LD, RDFa structure to exchange information about the games is well 
    documented, is simple, but can be effectively used for S2S exchange information:
    * Focused on micro HTML markup.
    * Do not contain all the necessary information
    * Not designed for data exchange that requires localization
    * Use an approach with a large number of meta information in the properties and assumptions associated with the property type.
  
    This specification and implementation aims to create a simple, understandable and user-friendly format
    in which companies and people who create, sell and talk about games could automate the exchange of
    information between their websites and APIs.
    
    # Data Model
    Like schema.org and RDF Schema data model of Open GDE is a fairly simple:
    * All data consists of a list of different objects organized into a multiple inheritance hierarchy
    where each type can be a subclass of other types.
    * All objects consist of a set of properties, each of them can be a simple data type or another
    object. Each property has only one type. 
    * A property can be one or more types combined into a list or dictionary there key is a simple type.
    * Simple types supported in Open GDE is string, uint, int, float.
    
    Unlike RDF-like data schemas, Open GDE does not contain a set of abstract or base classes and
    properties, and does not support multiple inheritance.
    
    The description of the objects includes properties and their values and does not contain additional
    prefixes and postfixes, does not describe and does not use the properties that describe meta
    information and/or range of values.
    
    The type hierarchy in Open GDE is simple, the data model is not universal, does not claim to be
    universal, and cannot be used to describe objects that are not related to the digital distribution of
    games. We expect this specification to be used primarily in Server-to-Server (S2S) data transfer and
    not as a substitute for other universal standards such as JSON-LD, Microdata, or Schema. Open GDE is
    not designed to be used as a basis for adding structural information to HTML pages. In the first
    edition, we do not aim to enrich the structured data HTML pages for indexing by search engines.
    


    ## Localized properties
    
    A large number of Open GDE properties can be represented in different languages. These are mainly text fields describing human-readable text and links to language-specific digital assets.   
    
    Any property that allows values of different languages should use the structure on the basis of the dictionary. The key in the dictionary is a string language tag written in lowercase. The value can be an arbitrary base type or an object. 
    
    The syntax of language tags was set by IETF [BCP 47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt). BCP stands for 'Best Current Practice ' and is a permanent name for the entire RFC series, whose number changes as they are updated. The latest RFC describing the syntax of language tags is [RFC 5646(Tags for the Identification of Languages)](http://www.rfc-editor.org/rfc/rfc5646.txt), and it is an update to RFC [4646](http://www.rfc-editor.org/rfc/rfc4646.txt), [3066](http://www.ietf.org/rfc/rfc3066.txt) and [1766](http://www.nordu.net/ftp/rfc/rfc1766.txt).
    
    Previously, you had to search for subtitles by referring to the code lists of different ISO standards, but today you can find all the subtitles in the [IANA Language Subtag Registry](http://www.iana.org/assignments/language-subtag-registry). 
    
    Most language tags consist of a two-or three-letter sub-tag. It is often followed by a region sub-tag consisting of two letters or three digits. RFC 5646 also allows the use of several more subtitles, if necessary.
    
    Use the shortest possible language tag. We highly recommend using only the primary language tag. A region subtag should only be used in a situation where the same string is represented in multiple versions of the same base language. 
    
    All languages supported in an object can be listed in the base languages property of each object or in the languages property of the root object.
    
    
    ```
    {
        "name": {
            "ru": "Ваше имя",
            "en": "Your name",
            "zh-ch": "你的名字"
        }
    }
    ```
    
    In the description of the property containing the localizable base type should use the type alias loc<base type>, for example loc<string>.
    
    
    ## Countries and regions
    
    Some properties and objects within Open GDE describe values, facts, or lists associated with individual regions and countries. An example of such a property would be the location of the publisher, developer, or game release in a particular territory. 
    
    The region tag syntax is set to [ISO 3166](https://www.iso.org/obp/ui/#iso:std:iso:3166:-1:ed-3:v1:en,fr). You can find all ISO tags describing countries and regions in the [ICAN Online Browsing Platform](https://www.iso.org/obp/ui/#search/code/). The text two-letter code (Alpha-2 code) should be used as country tags. 
    
    Open GDE uses the "GLOBAL" tag as an exception to ISO 3166 to describe properties that imply regional segmentation but describe information that is the same for all regions.
    
    
    ## Currency  
    
    The cost of games and goods may vary in different regions. Open the GDE operates with [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard for unique identification of currency and country. The full list of codes can be found on the website [currency-iso.org](https://www.currency-iso.org/dam/downloads/lists/list_one.xml)!

    
    ## Transport layer
    
    Open GDE use POST requests in the HTTP standard for transferring data between endpoints.  All requests and responses must use the correct return codes in the HTTP standard.
    
    
    
    *   Requests that return content should return HTTP code 200 for all valid requests.
    *   Requests that do not return data (event notifications, status requests) should return  HTTP return code 204.
    *   Incorrect requests (such as requests with an incorrect signature or checksum, or requests with an incorrect data schema) should return an HTTP return code 400 without content.
    *   Endpoint should return HTTP return code of 500 without content if has any temporary errors..
    
    While making requests in Open GDE using HTTP, the version is should be passed as a special HTTP header, which makes it easier to choose the correct implementation of objects on the receiving and transmitting side. The version passed is specified as major and minor of the version using semantic versioning. For the transmission version must use the header "_x-opengde-version: 1.0_".
    
    
    ## Encryption
    
    HTTPS (secure HTTP) should be used to exchange data in the Open GDE format. We strongly recommend using HSTS (HTTP Strict Transport Security) if you are requesting data from a client.
    
    
    ### End-to-End encryption (E2EE)
    
    One of the ways to use Open GDE is to transfer data about the audience of games between different companies. Asymmetric e2ee encryption will be used if messages transferred with Data Hub feature. 
    
    _This version of the document and specification does not select or describe the final encryption algorithm. This part of the specification we plan to modify to version 1.0 r._
    
    
    ## Encoding 
    
    
    ### Representation
    
    JSON (JavaScript Object Notation) is the default format for exchanging data. We chose JSON for its simplicity of human understanding, compactness and readiness for quick integration with any programming language or framework. Other serialization standards (MessagePack, Protobuf, Avro, etc.) can be used to optimize network bandwidth or for other reasons. Open GDE provides out-of-the-box implementations for using these formats and we strongly recommend using them to simplify integration processes between different participants. 
    
    
    
    *   Requests sent using HTTP 1.1 in JSON format must contain the correct mime type specified by the Content-Type header. 
    *   The standard value for JSON Content-Type header is "_application/json_".
    *   The default value for MessagePack Content-Type header is "_application/x-msgpack_".
    *   The standard value for Protobuf Content-Type header is "_application/x-protobuf_".
    
    If the content-Type header is not specified in the message, the "_application/json_" format will be used.
    
    
    ### Compression
    
    The amount of data transferred with Open GDE can be huge, and endpoints are required to support data compression to reduce the amount and speed of data transfer over the network.  
    
    Endpoints that send HTTP 1.1 messages are required to send _gzip-compressed_ data by specifying the appropriate value in the HTTP [Accept-Encoding header](https://tools.ietf.org/html/rfc7231#section-5.3.4).
    
    Receiving hosts are required to support _gzip _and respond to requests by passing an HTTP [Content-Encoding](https://tools.ietf.org/html/rfc7231#section-3.1.2.2) header.
    
    ## Domain
    The exchange of information within Open GDE is built on structured objects that describe the various
    objects in the ecosystem of publishing and selling games and the processes associated with it. Most
    of the objects in Open GDE are intended to create a universal and simple methods for the automated
    exchange of information.
    
    The UML diagram below shows the basic Open GDE objects and their relationship.
    ![UML](http://www.plantuml.com/plantuml/img/VPBDQiCm48JlUeh5nu83kPfYA3tqs11exxArZaNrOwHDWzw-aYqhIWkzsDfbPlNjsFvBceKxhi5JK1YVJevqrOhDKY1efDaAlnMe5mgnfGTqdZ6I50qdxaXo1S9gBWreAr0nDYhkFNn6bttZ6dFzuT7buyiuI_n6ZOPovzNgXPkGgvFYD5cdz_8wAEddkzrxt8sdI8oCiN8RDCV3uQc1LjYRQQ69npAk4YM5avUPDac2wv8mU7X-61Pr2gSigy2XMxS7EpqQqk1sXyXhTV1-C_uVNTcmAqS1rW2XSvAi2p04w7zpjIjI2gE3Cqxnkm3Pl_YhRCifyspz7D3n7b3cx5cAeqOqjUQC5nd_b8smPtKcnLBhux0iBMjciFMLcNu0)

  version: "1.0.0a"
  title: Open Game Data Exchange
  contact:
    email: nikolay.bondarenko@protocol.one  
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /videogames/{id}:
    get:
      tags:
        - developers
      summary: Get video game object
      operationId: getGame
      description: |
        By passing in the appropriate options, you can grab all available 
        information abouth the game in the system
      parameters:
        - name: id
          in: path
          description: Game ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoGame'
        '404':
          description: not found
  /tag:
    get:
      tags:
        - developers
      summary: searches tags
      operationId: searchTags
      description: |
        By passing in the appropriate options, you can search for
        available tags in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up tags
          required: false
          schema:
            type: string
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: bad input parameter
    post:
      tags:
        - admins
      summary: add new tag
      operationId: addTag
      description: Used to add new tags to the system.
      responses:
        '201':
          description: tag created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        description: Tag item to add        
  /healthCheck:
    get:
      tags:
        - healthcheck
      responses:
        200:
          description: "confirm that the service is healthy"
        default:
          description: "generic error response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"      
components:
  schemas:
    ErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    LocalizedString:
      type: object
      additionalProperties:
        type: string
      example:
        en: Hello!
        fr: Bonjour!
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          minLength: 37
          maxLength: 37
          example: d290f1ee-6c54-4b01-90e6-d701748f0851          
        name:
          type: string
          example: "Single Player Game"
    Tag:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          minLength: 37
          maxLength: 37
          example: d290f1ee-6c54-4b01-90e6-d701748f0851          
        name:
          type: string
          example: "Steam"
    Genre:
      type: object
      description: Object describes a uniform string and the ID of the game genre. 
      properties:
        uid:
          type: string
          format: uuid
        name:
          type: string
    Image:
      type: object
      description: |
        The object describes graphical assets and their properties. It contains not only a url to the
        image, but also the aspect ratio of the image and some meta information like the presence of a
        transparent layer, the dominant color, palette, gamma. Additional data will help to choose the
        right context for placement on web pages and can be used to optimize marketing materials,
        including in the mode of automatic AB-tests.
      required:
        - url
      properties:
        uid:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        height:
          type: integer
          description: Image size in pixels vertically
        width:
          type: integer
          description: Image size in pixels horizontally
        aspectRatio:
          type: number
          format: float
          description: |
            The ratio of the width to the height of an image in format: ratio:1. For example, 
            5:4 -> 1.25: 1, ratio = 1.25
        gamma:
          type: string
          description: dark or light
          example: dark
        transparent:  
          type: boolean
          description: Presence of a transparent layer
        dominantColor:
          type: string
          description: Dominant image color in HEX
          example: #FF31AF
        palette:
          type: array
          items:
            type: string
          description: A palette of 9 primary colors of an image in HEX
        tags:
          type: array
          items:
            type: string
          description: Tags that describe what is pictured
    Video:
      type: object
      description: |
        Object describing video assets. Video materials are usually placed on one of the public video
        hosting such as youtube, vimeo, youku. Video is characterized by duration, aspect ratio and
        quality.
      required:
        - url
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identity in Open GDE ecosystem
        url:
          type: string
          format: uri
        platfrom: 
          type: string
          example: "youtube"
        ratio:
          type: number
          format: float
          description: |
            The ratio of the width to the height of a video in format: ratio:1.For example, 5:4 -> 1.25: 1, ratio = 1.25
          quality:
            type: array
            items:
              type: integer
            description: |
              Image quality options available: 144, 240, 360, 480, 720, 1080, 1440, 2160 (p), etc.
            example: [144, 240, 360, 480, 720, 1080, 1440, 2160]
          length:
            type: number
            format: int32
            description: Video duration in seconds
          uploadDate:
            type: string
            format: date
          thumbnail:
            type: array
            items:
              $ref: "#/components/schemas/Image"
          tags:
            type: array
            items:
              type: string
            description: Tags that describe what's on the video
          stream:
            type: boolean
            description: True if video is game stream
    Site:
      type: object
      description: |
        The object describing the site. Should be used for links to external sites, such as the press,
        localization groups, forums and communities.
      properties:
        uid: 
          type: string
          format: uuid
          description: Unique identity in Open GDE ecosystem.
        name: 
          type: string
        url:
          type: string
          format: uri
          description: Canonical site URL
        icon: 
          $ref: "#/components/schemas/Image"
    Platform:
      type: object
      description: |
        The object describes the platform the game is published and distributed. Each platform has
        a set of properties: a unique identifier, name, site, logo in different views, etc. 
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identity in Open GDE ecosystem.
        title: 
          type: string
          description: Platform title common for all languages.
        url:
          type: string
          format: uri
          description: The url of the platform website.
        logo:
          type: array
          description: List of logos and platform visual identities.
          items:
            $ref: "#/components/schemas/Image"
    AvailableOn:
      type: object 
      description: |
        The object describes the list of platforms there the game is available. The game can be available
        on a large number of sites. On each of the sites in the game page has its own unique address.
      properties:
        url:
          type: string
          format: uri
          description: Link to the game on platform’s website
        platfrom:
          $ref: "#/components/schemas/Platform"
        price:
          type: array
          items:
            $ref: "#/components/schemas/Price"
    Publisher:
      type: object
      description: |
        The object describes the publisher of the game. A game can have one or more publishers.
        Publishers can be distributed to different territories: specific countries or regions. The global
        publisher or publisher in the territory may change over time.
      properties:
        uid: 
          type: string
          format: uuid
        company:
          $ref: "#/components/schemas/Company"
        territory:
          type: array
          items:
            type: string
          description: Region identifier according to ISO 3166 (or GLOBAL)
        startDate:
          type: string
          format: date-time
          description: The date the publisher started publishing the game
        endDate:
          type: string
          format: date-time
          description: |
            Date by which the publisher has finished publishing the game or NULL, if it
            publishes up to the present moment
    SystemRequirements:
      type: object
      description: |
        The object contains the hardware configuration requirements for the game launch.
      properties:
        uid:
          type: string
          format: uuid
          description: Unique identity in Open GDE ecosystem.        
        os:
          type: string
          description: Identity of OS
        cpu:
          type: string
          description: Required CPU
        ram:
          type: string
          description: Requires RAM
        videoCard:
          type: string
          description: Required video card
        minResolution:
          type: string
          description: Required minimum resolution 
        maxResolution:
          type: string
          description: Max available resolution  
        directX:
          type: string
          description: Required DirectX version 
        hdd:
          type: string
          description: Required free space on hard drive
        internet:
          type: string
          description: Required Internet speed
    Company:
      type: object
      description: |
        The object describing the company. This is the base object describing publishers, 
        developers, vendors and any representatives of services.
      properties:
        uid: 
          type: string
          format: uuid
          description: Unique identity in Open GDE ecosystem
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: "Super Game Development"
    ReleaseDate:
      type: object
      description: |
        The object describes the information about the list of regions and the release date of 
        the game in these regions. Regional division is typical for a large number of MMO games. 
        In the case of a global release, the territory attribute can be empty or contain 
        a single value — global.
      properties:
        date:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          description: Date of release 
        region:
          type: array
          items:
            type: string
          description: Region identifier according to ISO 3166 (or GLOBAL)
          example: ['US', 'DE']
    Price:
      type: object 
      desctription: The object describes the cost and the regional currency.
      properties:
        price: 
          type: number
          format: double
          description: Price accurate to two decimal places
        currency:
          type: string
          description: Currency code in accordance with ISO 4217
    Achievement:
      type: object
      description: |
        The object describes the achievements and tasks associated with the gameplay progress, style of
        play, finding the secrets, collectibles, etc. For a number of platforms, getting achievements
        unlocks new content, such as bonus maps, drawings, character skins.
      properties:
        uid: 
          type: string
          format: uuid          
          example: 8d13b6b7-f52f-41d1-b573-6bd56ec7a750
          description: Unique identity in Open GDE ecosystem
        internalId:
          type: string
          description: Internal ID of the achievement on a specific platform
          example: too_risky_man
        index: 
          type: integer
          format: int32
          description: Number in the list of achievements 
          example: 1
        name:
          $ref: "#/components/schemas/LocalizedString"
        description:
          $ref: "#/components/schemas/LocalizedString"
        score:
          type: integer
          format: int32
          description: An abstract value associated with the value or difficulty of obtaining achievement
          example: 10
        secret:
          type: boolean
          description: |
            Flag that determines whether the Description of achievements can be shown if it is not
            received
          default: false
        icon:
          $ref: "#/components/schemas/Image"
        iconReceived:
          $ref: "#/components/schemas/Image"
        image:
          $ref: "#/components/schemas/Image"
    GainedAchievement:
      type: object
      description: |
        The object describes the received achievements (date and time or conditions of their receipt, 
        etc.).
      properties:
        achievement: 
          $ref: "#/components/schemas/Achievement"
        createdAt:
          type: string
          format: date-time
    ContentRating:
      type: object
      properties:
        name: 
          type: string
        rating:
          type: integer
    User:
      type: object
      description: |
        The object describes the basic user with a list of available platform binding information. 
        
        *UNDONE*: It is not decided how to describe meta information related to the platforms and / or
        the amount of data that can be requested from the platforms. How to split and merge users. This
        object is a draft.
      properties:
        uid:
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identity in Open GDE ecosystem
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        nickname:
          type: string
        avatar:
          type: array
          items:
            $ref: "#/components/schemas/Image"
    Award:
      type: object
      description: |
        This object describes the received awards(publications, festivals, platforms or exhibitions).
      properties:
        company:
          $ref: "#/components/schemas/Company"
        title:
          $ref: "#/components/schemas/LocalizedString"
        description:
          $ref: "#/components/schemas/LocalizedString"
        image: 
          $red: "#/components/schemas/Image"
    Review:
      type: object
      description: The object describes the game reviews.
      properties:
        site:
          $ref: "#/components/schemas/Site"
        title:
          $ref: "#/components/schemas/LocalizedString"
        description:
          $ref: "#/components/schemas/LocalizedString"
        author:
          type: string
          description: Review author name
          example: Ron Davis
        url:
          type: string
          format: uri
          description: Url to review 
        currentRating:
          type: number
          format: float
          description: The game rating.
          example: 4.5
        maxRating:
          type: number
          format: float
          description: Max available rating value.
          example: 5.0
    VideoGame:
      type: object
      description: |
        The Central object in the open gde ecosystem, which describes information about 
        the game and all related processes and objects. 
        
        *UNDONE*: Properties for 
        - DLC
        - pre-order
        - discounts
        - age certificates
      properties:
        uid: 
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identity in Open GDE ecosystem
        title: 
          $ref: "#/components/schemas/LocalizedString"
        about:
          $ref: "#/components/schemas/LocalizedString"
        description:
          $ref: "#/components/schemas/LocalizedString"
        slogan:
          $ref: "#/components/schemas/LocalizedString"
        releaseDate:
          description: Links to ReleaseDate objects
          type: array
          items:
            $ref: "#/components/schemas/ReleaseDate"
        language:
          description: Supprted list of ISO 639-1 codes
          type: array
          items:
            type: string
          example: ['en', 'fr']        
        owners:
          type: array
          items:
            $ref: "#/components/schemas/Company"
        followers:
          type: integer
          format: int32
          description: The aggregated count of the game followers across of all platforms.
          example: 100
        currentRating:
          type: number
          format: float
          description: The game rating.
          example: 4.5
        maxRating:
          type: number
          format: float
          description: Max available rating value.
          example: 5.0
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        category:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        subCategory:
          type: array
          items:
            type: string
        price:
          type: array
          items:
            $ref: "#/components/schemas/Price"
        genre:
          type: array
          items:
            $ref: "#/components/schemas/Genre"
        platforms:
          type: array
          items:
            $ref: "#/components/schemas/Platform"
        developer:
          $ref: "#/components/schemas/Company"
        publisher:
          type: array
          items:
            $ref: "#/components/schemas/Publisher"
        musicBy:
          $ref: "#/components/schemas/Company"
        contentRating:
          $ref: "#/components/schemas/ContentRating"
        awards:
          type: array
          items:
            $ref: "#/components/schemas/Award"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
        trailer:
          $ref: "#/components/schemas/Video"
        website:
          $ref: "#/components/schemas/Site"
        availableOn:
          type: array
          items:
            $ref: "#/components/schemas/AvailableOn"
        videos:
          type: array
          items:
            $ref: "#/components/schemas/Video"
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        achievements:
          type: array
          items:
            $ref: "#/components/schemas/Achievement"
        sysRequirements:
          type: object
          properties:
            min:
              $ref: "#/components/schemas/SystemRequirements"
            max:
              $ref: "#/components/schemas/SystemRequirements"
          description: | 
            Hash table with system requirement objects. Could contains default, min and max keys.
        license:
          type: string
          format: uri
        privacyPolicy:
          type: string
          format: uri
        translations:
          type: object
          description: |
            The list of translation companies working on the game. The key is the language code.
          additionalProperties:
            $ref: "#/components/schemas/Company"
    DLC:
      type: object
      description: |
        The object describes additional content for the game. 
        
        *UNDONE*: this object is not described completely in version 1.0a. We plan to complete into
        version 1.0r.
      properties:
        uid: 
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identity in Open GDE ecosystem
        title: 
          $ref: "#/components/schemas/LocalizedString"
        description:
          $ref: "#/components/schemas/LocalizedString"
    DigitalKey:
      type: object
      description: |
        The object describes a digital key. The activation of akey allows to issue a digital license to
        own the game, DLC or digital goods.
        
        *UNDONE*: this object is a draft. We plan to complete it to version 1.0b.
      properties:
        uid: 
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identity in Open GDE ecosystem
        assetId:
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: |
            Unique identifier of the game / DLC / digital good in the Open GDE ecosystem
        streamUrl:
          type: string
          format: uri
          description: |
            The address of the stream where the key was generated and where the activation information
            should be sent.
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createDate:
          type: string
          format: date-time
          description: Key generation date and time
        restrictions:
          type: array
          items:
            type: string
          description: List of available regions activation 
    OwningLicense:
      type: object
      description: |
        The object describes a digital license for a game, DLC, or digital goods owned by a user on a
        particular platform.
        
        *UNDONE*: this object is a draft. We plan to complete it to version 1.0b.
      properties:
        uid: 
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identity in Open GDE ecosystem
        assetId:
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: |
            Unique identifier of the game / DLC / digital good in the Open GDE ecosystem
        userId:
          type: string
          format: uuid          
          example: d290f1ee-6c54-4b01-90e6-d701748f0851    
          description: Unique identifier of the license owner.
        createDate:
          type: string
          format: date-time
          description: Date and time of license activation.