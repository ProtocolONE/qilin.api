openapi: 3.0.1
info:
  title: API for providing and changing rights for users and resources
  version: 1.0.0

servers:
  - url: https://qilinapi.tst.protocol.one
    description: Master test server

paths:
  /api/v1/vendors/{id}/users:
    get:
      tags:
        - "common"
      summary: "Gets list of users"
      parameters:
        - name: id
          required: true
          in: path
          description: "ID of vendor"
          schema:
            type: string
            format: uuid
        - name: query
          in: query
          description: "Filter users by name or email"
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: "Order by field"
          required: false
          schema:
            type: string
            enum:
              - +name
              - -name
              - +email
              - -email
              - +last_seen
              - -last_seen
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserShort"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /api/v1/vendors/{id}/invites/{inviteId}:
    put:
      summary: "Accept invite"
      parameters:
        - name: id
          required: true
          in: path
          description: "ID of vendor"
          schema:
            type: string
            format: uuid
        - name: inviteId
          required: true
          in: path
          description: "ID of invite"
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  enum:
                    - accept
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /api/v1/vendors/{id}/invites:
    post:
      tags:
        - "common"
      summary: "Send invite to user"
      parameters:
        - name: id
          required: true
          in: path
          description: "ID of vendor"
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "example@example.com"
                gameId:
                  type: string
                  format: uuid
                roles:
                  type: array
                  items:
                    type: string
                    enum:
                      - manager
                      - accountant
                      - pubisher
                      - store
                      - support
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserShort"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'

  /api/v1/vendors/{id}/users/{userId}:
    get:
      tags:
        - "common"
      summary: "Get roles for user"
      parameters:
        - name: id
          required: true
          in: path
          description: "ID of vendor"
          schema:
            type: string
            format: uuid
        - name: userId
          description: "user ID"
          required: true
          schema:
            type: string
            format: uuid
          in: path
        - name: sort
          in: query
          description: "Order by field"
          required: false
          schema:
            type: string
            enum:
              - +internalName
              - -internalName
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - "common"
      summary: "Change roles for user"
      parameters:
        - name: id
          description: "vendor ID"
          required: true
          schema:
            type: string
            format: uuid
          in: path
        - name: userId
          description: "user ID"
          required: true
          schema:
            type: string
            format: uuid
          in: path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                added:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: "Resource (Game) id"
                      roles:
                        type: array
                        items:
                          type: string
                          enum:
                            - manager
                            - accountant
                            - pubisher
                            - store
                            - support
                removed:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: "Resource (Game) id"
                        format: uuid
                      roles:
                        type: array
                        items:
                          type: string
                          enum:
                            - manager
                            - accountant
                            - pubisher
                            - store
                            - support
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        500:
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal Server Error
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            message: "Resource with same unique id already exists"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 422
            message: "Fields required: 'title, description'"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    Offset:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.
    Limit:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        default: 20
      description: The numbers of items to return.

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    UserShort:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        games:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              image:
                type: string
              internalName:
                type: string
        lastSeen:
          type: string
          format: 'date-time'
        roles:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum:
                  - manager
                  - accountant
                  - pubisher
                  - store
                  - support
              game:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  image:
                    type: string
                  internalName:
                    type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        permissions:
          type: array
          items:
            type: object
            properties:
              resource:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  isGlobal:
                    type: boolean
                    description: "Flag indicates that this permission is global for user with vendor context"
                  internalName:
                    type: string
                  image:
                    type: string
              roles:
                type: array
                items:
                  type: string


security:
  - bearerAuth: []